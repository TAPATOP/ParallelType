@model ParallelTypeSystem.Web.Models.DocumentViewModel

@{
    var blink = "<span class=\"blink-wrapper\"><span class=\"blinking-cursor\">|</span></span>";
}
<link rel="stylesheet" href="~/Content/text-editor-style.css"/>

<div class="main-panel">
    <div class="left-sidebar">
        <div class="top-bar left">
            <div class="button">
                <img src="~/Content/images/tag.png">
            </div>
            <div class="search" action="">
                <input type="text" name="search-string">
            </div>
            <div class="button" id="btn-add-document">
                <img src="~/Content/images/new-file.png" title="Add new document">
            </div>
        </div>
        <hr>
        <div class="other-files">
            @for (int i = 0; i < Model.Files.Count; i++)
            {
                <div class="other-file">
                    <div class="file-header">
                        <a href="/Documents/Editor/@Model.Files[i].Guid">@Model.Files[i].Name</a>
                    </div>
                </div>
                <div class="file-separator"></div>
            }
        </div>
    </div>

    <div class="separator"></div>

    <div class="central-section">
        <div class="top-bar central">
            <div class="text-manipulation">
                <div class="button">
                    <div class="letter-icon" id="bold">B</div>
                </div>
                <div class="button">
                    <div class="letter-icon" id="italic">I</div>
                </div>
                <div class="button">
                    <div class="letter-icon" id="underline">U</div>
                </div>
                <div class="button">
                    <div class="letter-icon" id="text-color">A</div>
                </div>
                <div class="alignment">
                    <div class="button left">
                        <img src="~/Content/images/align-left.png">
                    </div>
                    <div class="button centre">
                        <img src="~/Content/images/align-central.png">
                    </div>
                    <div class="button right">
                        <img src="~/Content/images/align-right.png">
                    </div>
                    <div class="button equalized">
                        <img src="~/Content/images/align-justify.png">
                    </div>
                </div>
            </div>
            <div class="file-operations">
                <div class="button statistics">
                    <img src="~/Content/images/statistics.png">
                </div>
                <div class="button history">
                    <img src="~/Content/images/history.png">
                </div>
                <div class="button share">
                    <img src="~/Content/images/share.png">
                </div>
            </div>
        </div>
        <hr>
        <div class="text-field">
            @if (Model.IsSet)
            {
                @Html.HiddenFor(model => model.Guid)
                <div tabindex="0" class="edit-wrapper">@Html.Raw(Model.Content)</div>
            }
        </div>
    </div>

    <div class="separator"></div>

    <div class="right-sidebar">
        <div class="top-bar right">
            <div class="user-icon">
                <img src="~/Content/images/icon.jpg">
            </div>
        </div>
        <hr>
        <div class="online-collaborators">
            <div class="collaborator-sign">
                Online collaborators
            </div>
            <div class="collaborator-icons">
                <div class="collaborator-icon">
                    <img src="~/Content/images/icon.jpg">
                </div>
                <div class="collaborator-icon">
                    <img src="~/Content/images/icon.jpg">
                </div>
                <div class="collaborator-icon">
                    <img src="~/Content/images/icon.jpg">
                </div>
            </div>
        </div>
    </div>
</div>
<div class="sent-to-server">
</div>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="modal-form" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <button type="button" class="close" onclick="closeModal()" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Modal title</h4>
                </div>
                <div class="modal-body">
                    ...
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="closeModal()">Close</button>
                    <button type="button" class="btn btn-primary modal-submit-button" onclick="submitForm(this)">Submit</button>
                </div>
            </form>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<script>
    var changedData = [];
    $(".text-field").hover(function () { this.focus(); }, function () { this.blur(); });

    var isClicked = false;

    @if (Model.IsSet)
    {
        @: setInterval(function () { sendChangedData() }, 500);
    }

    $(".text-field").click(function () {
        if (!isClicked) {
            var firstSpan = $(".text-field").find('span').first();
            var newBlink = $('@Html.Raw(blink)');
            newBlink.insertBefore(firstSpan);
        }

        isClicked = true;
    });

    $(".text-field").keyup(function (e) {
        var blink = $('.blink-wrapper');
        if (e.keyCode == 37) {
            // left

            var prev = blink.prev('span');
            if (prev.length > 0) {
                var newBlink = $('@Html.Raw(blink)');
                blink.remove();
                newBlink.insertBefore(prev);
            }
        }
        else if (e.keyCode == 38) {
            // up
            var previousBr = blink.prev('br');
            if (previousBr.length == 0) {
                var elementsOnSameRow = blink.prevUntil('br');
                var firstElementOnSameRow = elementsOnSameRow[elementsOnSameRow.length - 1];
                previousBr = $(firstElementOnSameRow).prev();
            }

            if (previousBr.length > 0) {
                var elementsOnPreviousRow = previousBr.prevUntil('br');
                elementsOnPreviousRow = elementsOnPreviousRow.toArray().reverse();

                var elementsOnSameRow = blink.prevUntil('br');
                var elementsCount = elementsOnSameRow.length;

                if (elementsOnPreviousRow.length == 0) {
                    // Empty line
                    var newBlink = $('@Html.Raw(blink)');
                    blink.remove();
                    newBlink.insertBefore(previousBr);
                }
                else {
                    var indexToInsert = elementsOnSameRow.length - 1;
                    if (indexToInsert >= 0) {
                        // Element is not on 0 index
                        if (indexToInsert > elementsOnPreviousRow.length - 1) {
                            // Upper line has less symbols
                            indexToInsert = elementsOnPreviousRow.length - 1;
                        }
                        var elementToInsert = $(elementsOnPreviousRow[indexToInsert]);

                        var newBlink = $('@Html.Raw(blink)');
                        blink.remove();
                        newBlink.insertAfter(elementToInsert);
                    }
                    else {
                        var elementToInsert = $(elementsOnPreviousRow[0]);
                        var newBlink = $('@Html.Raw(blink)');
                        blink.remove();
                        newBlink.insertBefore(elementToInsert);
                    }
                }
            }
        }
        else if (e.keyCode == 39) {
            // right

            var next = blink.next('span');
            if (next.length > 0) {
                var newBlink = $('@Html.Raw(blink)');

                blink.remove();
                newBlink.insertAfter(next);
            }
        }
        else if (e.keyCode == 40) {
            // down
        }
        else if (e.keyCode == 8) {
            // backspace
            var prev = blink.prev();
            if (prev.length > 0) {
                var text = prev[0].outerHTML;
                prev.remove();

                var allPreviousElements = blink.prevAll().toArray().reverse();
                var html = getFullHtmlOfList(allPreviousElements);
                changedData.push({ ChangeType: 'Delete', Position: html.length, Value: text });
            }
        }
        else if (e.keyCode == 46) {
            // delete key
            var next = blink.next('span');
            if (next.length > 0) {
                next.remove();
            }
        }
        else if (e.keyCode == 13) {
            // enter key
            var br = $('<br>');
            br.insertBefore(blink);
        }
        //else {
        //    alert(e.keyCode);
        //}
    });

    $('.text-field').keypress(function (e) {
        var inp = String.fromCharCode(e.keyCode);
        if (/[a-zA-Z0-9-_!@@#$%^&*()=+~ ]/.test(inp)) {
            var letter = String.fromCharCode(e.keyCode);
            var blink = $('.blink-wrapper');
            if (letter == ' ') {
                letter = '&nbsp;';
            }

            var text = '<span>' + letter + '</span>';

            var allPreviousElements = blink.prevAll().toArray().reverse();
            var html = getFullHtmlOfList(allPreviousElements);
            changedData.push({ ChangeType: 'Add', Position: html.length, Value: text });

            var item = $(text);
            item.insertAfter(blink);

            var newBlink = $('@Html.Raw(blink)');
            blink.remove();
            newBlink.insertAfter(item);
        }
    });

    function showModal(title, bodyHtml, dataId) {
        $('#myModal .modal-title').html(title);
        $('#myModal .modal-body').html(bodyHtml);
        $('#myModal').modal('show');
        $('.modal-submit-button').attr('data-id', dataId);
    }

    $('.button').click(function (e) {
        var btn = e.target.closest('.button');
        if ($(btn).attr('id') == 'btn-add-document') {
            var nameLabel = $('<label for="name" style="display: block">Document name</label>');
            var nameInput = $('<input name="name" />');

            var publicReadAll = $('<label for="PublicReadAll">Can everybody view</label>');
            var publicReadInput = $('<input type="checkbox" name="PublicReadAll" id="PublicReadAll" />');
            var publicRead = $('<div>').append(publicReadInput).append(publicReadAll);

            var publicWriteAll = $('<label for="PublicWriteAll">Can everybody edit</label>');
            var publicWriteInput = $('<input type="checkbox" name="PublicWriteAll" id="PublicWriteAll" />');
            var publicWrite = $('<div>').append(publicWriteInput).append(publicWriteAll);

            var result = $('<div>');
            result
                .append(nameLabel)
                .append(nameInput)
                .append(publicRead)
                .append(publicWrite)
            $('.modal form').attr('action', '/Documents/AddNewFile');
            showModal('Add new document', result.html(), 'AddNewFile');
        }
    });

    function closeModal() {
        $('.modal-submit-button').removeAttr('disabled');
    }

    function normalize(data) {
        var result = [];

        for (var i = 0; i < data.length; i++) {
            var value = data[i].value;
            if (data[i].type == "checkbox") {
                value = $(data[i]).prop('checked');
            }

            var item = { name: data[i].name, value: value };
            result.push(item);
        }

        return result;
    }

    function displayError() {
        var errorBox = $('.modal form .error-box');
        if (errorBox.length > 0) {
            errorBox.show();
        }
        else {
            var message = $('<div style="color: red" class="error-box">Error occured</div>');
            $('.modal form .modal-body').append(message);
        }
    }

    function removeError() {
        var errorBox = $('.modal form .error-box');
        if (errorBox.length > 0) {
            errorBox.hide();
        }
    }

    function getFullHtmlOfList(data) {
        var len = data.length;
        var result = "";
        for (var i = 0; i < len; i++) {
            result += data[i].outerHTML;
        }

        return result;
    }

    function submitForm(btn) {
        $(btn).attr('disabled', 'disabled');
        var form = $(btn).closest('form');
        var action = $(form).attr('action');
        var data = $(form).find('input');
        data = normalize(data);

        $.ajax({
            method: "post",
            url: action,
            data: data,
            success: function (res) {
                if (res.success) {
                    removeError();

                    var dataId = $('.modal-submit-button').attr('data-id');
                    if (dataId == 'AddNewFile') {
                        window.location.href = '/Documents/AddNewFile/' + res.guid;
                    }
                }
                else {
                    displayError();
                }
                $('.modal-submit-button').removeAttr('disabled');
            },
            error: function (err) {
                console.log(err);
                displayError();
                $('.modal-submit-button').removeAttr('disabled');
            }
        });

        return false;
    }

    function sendChangedData() {
        var data = changedData;
        changedData = [];
        var guid = $('#Guid').val();

        var objToSent = {
            Changes: data,
            Guid: guid
        };
        $.ajax({
            method: "post",
            url: '/Documents/ApplyChanges',
            data: objToSent,
            success: function (res) {
                var currentHtml = $('.edit-wrapper').html().replace('<span class="blink-wrapper"><span class="blinking-cursor">|</span></span>', '');
                if (currentHtml != res.result) {
                    var blink = $('.blink-wrapper');
                    var index = blink.prevAll().length;
                    $('.edit-wrapper').html(res.result);
                    var span = $($('.edit-wrapper').children()[index]);

                    var newBlink = $('@Html.Raw(blink)');
                    newBlink.insertBefore(span);
                }
            },
            error: function (err) {
                console.log(err);
            }
        });
    }
</script>